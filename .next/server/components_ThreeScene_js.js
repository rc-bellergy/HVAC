"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_ThreeScene_js";
exports.ids = ["components_ThreeScene_js"];
exports.modules = {

/***/ "./components/ThreeScene.js":
/*!**********************************!*\
  !*** ./components/ThreeScene.js ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ThreeScene)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"three\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls.js */ \"three/examples/jsm/controls/OrbitControls.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_EffectComposer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/examples/jsm/postprocessing/EffectComposer.js */ \"three/examples/jsm/postprocessing/EffectComposer.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_RenderPass_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three/examples/jsm/postprocessing/RenderPass.js */ \"three/examples/jsm/postprocessing/RenderPass.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three/examples/jsm/postprocessing/UnrealBloomPass.js */ \"three/examples/jsm/postprocessing/UnrealBloomPass.js\");\n/* harmony import */ var three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! three/examples/jsm/renderers/CSS2DRenderer.js */ \"three/examples/jsm/renderers/CSS2DRenderer.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([three__WEBPACK_IMPORTED_MODULE_2__, three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_3__, three_examples_jsm_postprocessing_EffectComposer_js__WEBPACK_IMPORTED_MODULE_4__, three_examples_jsm_postprocessing_RenderPass_js__WEBPACK_IMPORTED_MODULE_5__, three_examples_jsm_postprocessing_UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_6__, three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_7__]);\n([three__WEBPACK_IMPORTED_MODULE_2__, three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_3__, three_examples_jsm_postprocessing_EffectComposer_js__WEBPACK_IMPORTED_MODULE_4__, three_examples_jsm_postprocessing_RenderPass_js__WEBPACK_IMPORTED_MODULE_5__, three_examples_jsm_postprocessing_UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_6__, three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_7__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\nfunction ThreeScene() {\n    const mountRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (false) {}\n        // Cleanup function\n        return ()=>{\n            if (mountRef.current) {\n                mountRef.current.innerHTML = \"\";\n            }\n        };\n    }, []);\n    function init() {\n        // ---------- Scene setup ----------\n        const container = mountRef.current;\n        const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n        scene.background = new three__WEBPACK_IMPORTED_MODULE_2__.Color(0x08101e);\n        scene.fog = new three__WEBPACK_IMPORTED_MODULE_2__.FogExp2(0x0a1326, 0.025);\n        const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(50, container.clientWidth / container.clientHeight, 0.1, 2000);\n        camera.position.set(42, 28, 44);\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer({\n            antialias: true,\n            alpha: false\n        });\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n        renderer.setSize(container.clientWidth, container.clientHeight);\n        renderer.outputColorSpace = three__WEBPACK_IMPORTED_MODULE_2__.SRGBColorSpace;\n        renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_2__.ACESFilmicToneMapping;\n        renderer.toneMappingExposure = 1.2;\n        renderer.domElement.classList.add(\"webgl\");\n        container.appendChild(renderer.domElement);\n        // CSS2D overlay for labels\n        const labelRenderer = new three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_7__.CSS2DRenderer();\n        labelRenderer.setSize(container.clientWidth, container.clientHeight);\n        labelRenderer.domElement.style.position = \"absolute\";\n        labelRenderer.domElement.style.inset = \"0\";\n        labelRenderer.domElement.style.pointerEvents = \"none\";\n        container.appendChild(labelRenderer.domElement);\n        // Controls\n        const controls = new three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_3__.OrbitControls(camera, renderer.domElement);\n        controls.enableDamping = true;\n        controls.target.set(0, 2.5, 0);\n        controls.minDistance = 10;\n        controls.maxDistance = 160;\n        controls.autoRotate = true;\n        controls.autoRotateSpeed = 0.4;\n        // Lights\n        const hemi = new three__WEBPACK_IMPORTED_MODULE_2__.HemisphereLight(0x9fdfff, 0x0a1730, 1.2);\n        scene.add(hemi);\n        const dir = new three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight(0xaed4ff, 1.2);\n        dir.position.set(40, 60, 20);\n        scene.add(dir);\n        // ---------- Postprocessing (bloom) ----------\n        const composer = new three_examples_jsm_postprocessing_EffectComposer_js__WEBPACK_IMPORTED_MODULE_4__.EffectComposer(renderer);\n        const renderPass = new three_examples_jsm_postprocessing_RenderPass_js__WEBPACK_IMPORTED_MODULE_5__.RenderPass(scene, camera);\n        composer.addPass(renderPass);\n        const bloomPass = new three_examples_jsm_postprocessing_UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_6__.UnrealBloomPass(new three__WEBPACK_IMPORTED_MODULE_2__.Vector2(container.clientWidth, container.clientHeight), 1.2, 0.9, 0.15);\n        bloomPass.threshold = 0.18;\n        bloomPass.strength = 1.6; // overall glow\n        bloomPass.radius = 0.9;\n        composer.addPass(bloomPass);\n        // ---------- Helpers / materials ----------\n        function makeGridTexture(size = 1024, majorEvery = 8) {\n            const c = document.createElement(\"canvas\");\n            c.width = c.height = size;\n            const g = c.getContext(\"2d\");\n            g.fillStyle = \"#061226\";\n            g.fillRect(0, 0, size, size);\n            g.strokeStyle = \"#2b6db8\";\n            g.globalAlpha = .14;\n            g.lineWidth = 1;\n            for(let i = 0; i < size; i += size / 64){\n                g.beginPath();\n                g.moveTo(i, 0);\n                g.lineTo(i, size);\n                g.stroke();\n                g.beginPath();\n                g.moveTo(0, i);\n                g.lineTo(size, i);\n                g.stroke();\n            }\n            g.strokeStyle = \"#4cc3ff\";\n            g.globalAlpha = .25;\n            g.lineWidth = 1.2;\n            for(let i = 0; i <= size; i += size / majorEvery){\n                g.beginPath();\n                g.moveTo(i, 0);\n                g.lineTo(i, size);\n                g.stroke();\n                g.beginPath();\n                g.moveTo(0, i);\n                g.lineTo(size, i);\n                g.stroke();\n            }\n            return new three__WEBPACK_IMPORTED_MODULE_2__.CanvasTexture(c);\n        }\n        const gridTex = makeGridTexture();\n        gridTex.wrapS = gridTex.wrapT = three__WEBPACK_IMPORTED_MODULE_2__.RepeatWrapping;\n        gridTex.repeat.set(12, 12);\n        const floorMat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshStandardMaterial({\n            color: new three__WEBPACK_IMPORTED_MODULE_2__.Color(0x0b1a32),\n            map: gridTex,\n            metalness: 0.0,\n            roughness: 1.0\n        });\n        const floor = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(new three__WEBPACK_IMPORTED_MODULE_2__.PlaneGeometry(90, 56), floorMat);\n        floor.rotation.x = -Math.PI / 2;\n        floor.position.y = 0.01;\n        scene.add(floor);\n        const gridHelper = new three__WEBPACK_IMPORTED_MODULE_2__.GridHelper(90, 45, 0x4cc3ff, 0x2b6db8);\n        gridHelper.position.y = 0.02;\n        scene.add(gridHelper);\n        // Utility: asset labeling\n        function addLabel(obj, text) {\n            const el = document.createElement(\"div\");\n            el.className = \"label\";\n            el.textContent = text;\n            const label = new three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_7__.CSS2DObject(el);\n            label.position.set(0, 1.8, 0);\n            obj.add(label);\n            return el;\n        }\n        // ---------- Pipe shader (animated dashes) ----------\n        const pipeUniforms = {\n            uTime: {\n                value: 0\n            },\n            uColorA: {\n                value: new three__WEBPACK_IMPORTED_MODULE_2__.Color(0x47e1ff)\n            },\n            uColorB: {\n                value: new three__WEBPACK_IMPORTED_MODULE_2__.Color(0x00ffa9)\n            },\n            uGlow: {\n                value: 1.0\n            },\n            uSpeed: {\n                value: 0.5\n            },\n            uStripe: {\n                value: 26.0\n            },\n            uMix: {\n                value: 0.5\n            }\n        };\n        const pipeMat = new three__WEBPACK_IMPORTED_MODULE_2__.ShaderMaterial({\n            uniforms: pipeUniforms,\n            transparent: true,\n            blending: three__WEBPACK_IMPORTED_MODULE_2__.AdditiveBlending,\n            depthWrite: false,\n            vertexShader: `\n        varying vec2 vUv;\n        varying float vCurve;\n        void main(){\n          vUv = uv;\n          vec3 transformed = position.xyz;\n          vCurve = length(normal.xy);\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(transformed,1.0);\n        }\n      `,\n            fragmentShader: `\n        varying vec2 vUv;\n        varying float vCurve;\n        uniform float uTime;\n        uniform vec3 uColorA;\n        uniform vec3 uColorB;\n        uniform float uGlow;\n        uniform float uSpeed;\n        uniform float uStripe;\n        uniform float uMix;\n        float pulse(float x){ return 0.5 + 0.5 * sin(x); }\n        void main(){\n          float t = fract(vUv.x * uStripe - uTime * (0.6 + 1.2*uSpeed));\n          float dash = smoothstep(0.1, 0.0, abs(t-0.5));\n          float core = smoothstep(0.04, 0.0, abs(t-0.5));\n          vec3 col = mix(uColorA, uColorB, uMix);\n          float edge = smoothstep(1.2, 0.2, vCurve);\n          float sparkle = 0.4 * pulse(uTime*2.0 + vUv.x*10.0);\n          float alpha = clamp(dash*1.6 + edge*0.35 + sparkle*0.15, 0.0, 1.0);\n          gl_FragColor = vec4(col * (1.0 + 2.0*core + 0.6*edge), alpha*uGlow);\n        }\n      `\n        });\n        // Helper: create tube along points\n        function makePipe(points, radius = 0.12) {\n            const curve = new three__WEBPACK_IMPORTED_MODULE_2__.CatmullRomCurve3(points, false, \"catmullrom\", 0.2);\n            const geom = new three__WEBPACK_IMPORTED_MODULE_2__.TubeGeometry(curve, Math.max(80, points.length * 20), radius, 16, false);\n            const mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geom, pipeMat);\n            const shell = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(new three__WEBPACK_IMPORTED_MODULE_2__.TubeGeometry(curve, Math.max(80, points.length * 20), radius * 1.35, 16, false), new three__WEBPACK_IMPORTED_MODULE_2__.MeshStandardMaterial({\n                color: 0x0b2b49,\n                metalness: 0.2,\n                roughness: 0.5,\n                transparent: true,\n                opacity: 0.08\n            }));\n            const group = new three__WEBPACK_IMPORTED_MODULE_2__.Group();\n            group.add(mesh, shell);\n            return {\n                group,\n                curve\n            };\n        }\n        // ---------- Assets (tanks, reactors, machines) ----------\n        const PICK = [];\n        function makeTank(id, pos) {\n            const g = new three__WEBPACK_IMPORTED_MODULE_2__.Group();\n            g.position.copy(pos);\n            const cyl = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(new three__WEBPACK_IMPORTED_MODULE_2__.CylinderGeometry(1.6, 1.6, 5.2, 24), new three__WEBPACK_IMPORTED_MODULE_2__.MeshStandardMaterial({\n                color: 0x2a70b7,\n                roughness: 0.2,\n                metalness: 0.1,\n                emissive: 0x0c5ca3,\n                emissiveIntensity: 0.6\n            }));\n            g.add(cyl);\n            g.userData = {\n                id,\n                name: `Tank ${id}`,\n                type: \"tank\",\n                temp: 21 + Math.random() * 4,\n                load: 0.5,\n                state: \"ok\"\n            };\n            addLabel(g, `Tank ${id}`);\n            PICK.push(cyl);\n            cyl.userData.ref = g;\n            scene.add(g);\n            return g;\n        }\n        function makeChiller(id, pos) {\n            const g = new three__WEBPACK_IMPORTED_MODULE_2__.Group();\n            g.position.copy(pos);\n            const box = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(new three__WEBPACK_IMPORTED_MODULE_2__.BoxGeometry(6, 3, 3), new three__WEBPACK_IMPORTED_MODULE_2__.MeshStandardMaterial({\n                color: 0x0d8a37,\n                roughness: 0.4,\n                metalness: 0.2,\n                emissive: 0x39ff78,\n                emissiveIntensity: 0.7,\n                transparent: true,\n                opacity: 0.92\n            }));\n            box.position.y = 1.5;\n            const frame = new three__WEBPACK_IMPORTED_MODULE_2__.LineSegments(new three__WEBPACK_IMPORTED_MODULE_2__.EdgesGeometry(new three__WEBPACK_IMPORTED_MODULE_2__.BoxGeometry(6, 3, 3)), new three__WEBPACK_IMPORTED_MODULE_2__.LineBasicMaterial({\n                color: 0x9affc9,\n                transparent: true,\n                opacity: 0.8\n            }));\n            frame.position.copy(box.position);\n            g.add(box, frame);\n            g.userData = {\n                id,\n                name: `Chiller ${id}`,\n                type: \"chiller\",\n                temp: 35 + Math.random() * 5,\n                load: 0.5,\n                state: \"ok\"\n            };\n            addLabel(g, `Chiller ${id}`);\n            PICK.push(box);\n            box.userData.ref = g;\n            scene.add(g);\n            return g;\n        }\n        function makeCompressor(id, pos) {\n            const g = new three__WEBPACK_IMPORTED_MODULE_2__.Group();\n            g.position.copy(pos);\n            const base = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(new three__WEBPACK_IMPORTED_MODULE_2__.BoxGeometry(4, 0.6, 4), new three__WEBPACK_IMPORTED_MODULE_2__.MeshStandardMaterial({\n                color: 0x1a1a1a,\n                roughness: .9,\n                metalness: .05,\n                emissive: 0x151515\n            }));\n            base.position.y = 0.3;\n            const body = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(new three__WEBPACK_IMPORTED_MODULE_2__.CylinderGeometry(1.3, 1.3, 4.2, 24), new three__WEBPACK_IMPORTED_MODULE_2__.MeshStandardMaterial({\n                color: 0x5a1a08,\n                roughness: 0.6,\n                metalness: 0.2,\n                emissive: 0xff6a2a,\n                emissiveIntensity: 0.9,\n                transparent: true,\n                opacity: 0.85\n            }));\n            body.position.y = 2.5;\n            g.add(base, body);\n            g.userData = {\n                id,\n                name: `Compressor ${id}`,\n                type: \"compressor\",\n                temp: 60 + Math.random() * 10,\n                load: 0.7,\n                state: \"ok\"\n            };\n            addLabel(g, `Compressor ${id}`);\n            PICK.push(body);\n            body.userData.ref = g;\n            scene.add(g);\n            return g;\n        }\n        // ---------- Layout (from 03.html) ----------\n        const tanks = [];\n        const chillers = [];\n        const compressors = [];\n        const tankPositions = [\n            [\n                -34,\n                -10\n            ],\n            [\n                -34,\n                -2\n            ],\n            [\n                -34,\n                6\n            ],\n            [\n                -34,\n                14\n            ]\n        ];\n        tankPositions.forEach(([x, z], i)=>{\n            tanks.push(makeTank(i + 1, new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(x, 2.6, z)));\n        });\n        const chillerPositions = [\n            -20,\n            -10,\n            0,\n            10,\n            20\n        ];\n        chillerPositions.forEach((x, i)=>{\n            chillers.push(makeChiller(i + 1, new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(x, 0, -6)));\n        });\n        const compressorPositions = [\n            -15,\n            -5,\n            5,\n            15\n        ];\n        compressorPositions.forEach((x, i)=>{\n            compressors.push(makeCompressor(i + 1, new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(x, 0, 6)));\n        });\n        // ---------- Pipe network ----------\n        const pipes = [];\n        // Connect tanks to a main line\n        const tankMainPts = [\n            new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(-40, 1.8, -12),\n            new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(-30, 1.8, 16)\n        ];\n        pipes.push(makePipe(tankMainPts, 0.18));\n        tanks.forEach((t)=>{\n            const p = t.position.clone();\n            pipes.push(makePipe([\n                new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(p.x + 1.8, 1.8, p.z),\n                new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(-30, 1.8, p.z)\n            ], 0.12));\n        });\n        // Connect chillers to a main line\n        const chillerMainPts = [\n            new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(-24, 1.2, -3),\n            new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(24, 1.2, -3)\n        ];\n        pipes.push(makePipe(chillerMainPts, 0.16));\n        chillers.forEach((c)=>{\n            const p = c.position.clone();\n            pipes.push(makePipe([\n                new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(p.x, 1.2, p.z + 1.5),\n                new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(p.x, 1.2, -3)\n            ], 0.12));\n        });\n        // Connect compressors to a main line\n        const compressorMainPts = [\n            new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(-20, 1.2, 3),\n            new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(20, 1.2, 3)\n        ];\n        pipes.push(makePipe(compressorMainPts, 0.16));\n        compressors.forEach((c)=>{\n            const p = c.position.clone();\n            pipes.push(makePipe([\n                new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(p.x, 1.2, p.z - 2),\n                new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(p.x, 1.2, 3)\n            ], 0.12));\n        });\n        // Cross-connect the main lines\n        pipes.push(makePipe([\n            new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(-28, 1.5, -8),\n            new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(-28, 1.5, 8)\n        ], 0.14));\n        pipes.push(makePipe([\n            new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(22, 1.5, 0),\n            new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(22, 1.5, 8)\n        ], 0.14));\n        pipes.forEach((p)=>scene.add(p.group));\n        // ---------- Flow particles ----------\n        function movingDot(color = 0x8cf0ff) {\n            const m = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(0.15, 12, 12), new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n                color,\n                transparent: true,\n                opacity: 0.9\n            }));\n            return m;\n        }\n        const flowDots = [];\n        pipes.slice(0, 3).forEach((p)=>{\n            for(let i = 0; i < 6; i++){\n                const d = movingDot(i % 2 ? 0x8cf0ff : 0x00ffa9);\n                scene.add(d);\n                flowDots.push({\n                    mesh: d,\n                    curve: p.curve,\n                    t: Math.random(),\n                    speed: 0.04 + Math.random() * 0.06\n                });\n            }\n        });\n        // ---------- Interactivity ----------\n        const raycaster = new three__WEBPACK_IMPORTED_MODULE_2__.Raycaster();\n        const mouse = new three__WEBPACK_IMPORTED_MODULE_2__.Vector2();\n        let selected = null;\n        function setSelection(mesh) {\n            selected = mesh?.userData?.ref || null;\n            updateSide(selected);\n        }\n        function onPointer(e) {\n            const rect = renderer.domElement.getBoundingClientRect();\n            const x = (e.clientX - rect.left) / rect.width * 2 - 1;\n            const y = -((e.clientY - rect.top) / rect.height) * 2 + 1;\n            mouse.set(x, y);\n            raycaster.setFromCamera(mouse, camera);\n            const list = raycaster.intersectObjects(PICK, false);\n            if (list.length > 0) setSelection(list[0].object);\n            else setSelection(null);\n        }\n        renderer.domElement.addEventListener(\"pointerdown\", onPointer);\n        // ---------- Telemetry simulation ----------\n        const allAssets = [\n            ...tanks,\n            ...chillers,\n            ...compressors\n        ];\n        function tickTelemetry() {\n            let throughput = 0;\n            // Generate more random throughput value\n            throughput = 0.5 + Math.random() * 3.0; // Random value between 0.5 and 3.5\n            // Update assets with more random values\n            allAssets.forEach((g)=>{\n                const u = g.userData;\n                // More random load values\n                u.load = Math.random();\n                u.temp = 20 + Math.random() * 60; // Temperature between 20 and 80\n                let state = \"ok\";\n                if (u.load > 0.95 || u.temp > 70) state = \"warn\";\n                if (u.load > 1.05 || u.temp > 80) state = \"alert\";\n                u.state = state;\n                const k = g.children.find((c)=>c.isMesh) || g;\n                const emissiveBoost = state === \"ok\" ? 0.8 : state === \"warn\" ? 1.3 : 1.7;\n                if (k.material && \"emissiveIntensity\" in k.material) {\n                    k.material.emissiveIntensity = emissiveBoost;\n                    if (u.type === \"chiller\") {\n                        k.material.color.set(state === \"alert\" ? 0x40141f : state === \"warn\" ? 0x2b4a0f : 0x0d8a37);\n                        k.material.emissive.set(state === \"alert\" ? 0xff355d : state === \"warn\" ? 0xff8a3a : 0x39ff78);\n                    }\n                    if (u.type === \"compressor\") {\n                        k.material.emissive.set(state === \"alert\" ? 0xff355d : state === \"warn\" ? 0xff8a3a : 0xff6a2a);\n                    }\n                }\n                const lbl = g.children.find((ch)=>ch.isCSS2DObject)?.element;\n                if (lbl) {\n                    lbl.classList.toggle(\"warn\", state === \"warn\");\n                    lbl.classList.toggle(\"alert\", state === \"alert\");\n                    lbl.innerHTML = `${u.name}<br><span class=\"value\">${u.load.toFixed(2)} load</span>`;\n                }\n            });\n            document.getElementById(\"throughput\").textContent = throughput.toFixed(2);\n            sparkPush(throughput);\n            if (selected) updateSide(selected);\n        }\n        setInterval(tickTelemetry, 10000);\n        // ---------- Side panel updates ----------\n        function updateSide(g) {\n            if (!g) {\n                document.getElementById(\"selId\").textContent = \"–\";\n                document.getElementById(\"selName\").textContent = \"Tap an object\";\n                document.getElementById(\"selStatus\").textContent = \"–\";\n                document.getElementById(\"selTemp\").textContent = \"–\";\n                document.getElementById(\"selLoad\").textContent = \"–\";\n                return;\n            }\n            const u = g.userData;\n            document.getElementById(\"selId\").textContent = u.id;\n            document.getElementById(\"selName\").textContent = `${u.name} (${u.type})`;\n            document.getElementById(\"selStatus\").textContent = u.state.toUpperCase();\n            document.getElementById(\"selTemp\").textContent = `${u.temp.toFixed(1)} °C`;\n            document.getElementById(\"selLoad\").textContent = `${(u.load * 100).toFixed(0)} %`;\n        }\n        // ---------- Sparkline ----------\n        const spark = document.getElementById(\"spark\");\n        const sg = spark.getContext(\"2d\");\n        let sparkData = [];\n        function sparkDraw() {\n            const w = spark.width = spark.clientWidth * 2;\n            const h = spark.height = spark.clientHeight * 2;\n            sg.clearRect(0, 0, w, h);\n            sg.fillStyle = \"#07142a\";\n            sg.fillRect(0, 0, w, h);\n            sg.strokeStyle = \"#13325a\";\n            sg.globalAlpha = .6;\n            sg.lineWidth = 1;\n            for(let x = 0; x < w; x += w / 10){\n                sg.beginPath();\n                sg.moveTo(x, 0);\n                sg.lineTo(x, h);\n                sg.stroke();\n            }\n            if (sparkData.length < 2) return;\n            const max = Math.max(1, ...sparkData);\n            const min = 0;\n            sg.globalAlpha = 1.0;\n            const grad = sg.createLinearGradient(0, 0, 0, h);\n            grad.addColorStop(0, \"#2dfcff44\");\n            grad.addColorStop(1, \"#00ffa922\");\n            sg.fillStyle = grad;\n            sg.beginPath();\n            sparkData.forEach((v, i)=>{\n                const x = i / (sparkData.length - 1) * (w - 4) + 2;\n                const y = h - (v - min) / (max - min) * (h - 6) - 3;\n                if (i === 0) sg.moveTo(x, y);\n                else sg.lineTo(x, y);\n            });\n            sg.lineTo(w - 2, h - 2);\n            sg.lineTo(2, h - 2);\n            sg.closePath();\n            sg.fill();\n            sg.strokeStyle = \"#68fff4\";\n            sg.lineWidth = 2.5;\n            sg.globalAlpha = 0.9;\n            sg.beginPath();\n            sparkData.forEach((v, i)=>{\n                const x = i / (sparkData.length - 1) * (w - 4) + 2;\n                const y = h - (v - min) / (max - min) * (h - 6) - 3;\n                if (i === 0) sg.moveTo(x, y);\n                else sg.lineTo(x, y);\n            });\n            sg.stroke();\n        }\n        function sparkPush(v) {\n            sparkData.push(v);\n            if (sparkData.length > 80) sparkData.shift();\n            sparkDraw();\n        }\n        window.addEventListener(\"resize\", sparkDraw);\n        // ---------- UI controls ----------\n        const flowRadios = [\n            ...document.querySelectorAll(\"input[name=flow]\")\n        ];\n        flowRadios.forEach((r)=>r.addEventListener(\"change\", ()=>{\n                const mode = Number(document.querySelector(\"input[name=flow]:checked\").value);\n                pipeUniforms.uSpeed.value = mode === 0 ? 0.0 : mode === 1 ? 0.55 : 1.4;\n            }));\n        document.getElementById(\"btnReset\").addEventListener(\"click\", ()=>{\n            camera.position.set(42, 28, 44);\n            controls.target.set(0, 2.5, 0);\n            controls.update();\n        });\n        let dark = true;\n        document.getElementById(\"btnTheme\").addEventListener(\"click\", ()=>{\n            dark = !dark;\n            scene.background = new three__WEBPACK_IMPORTED_MODULE_2__.Color(dark ? 0x08101e : 0x0e1c28);\n            renderer.toneMappingExposure = dark ? 1.2 : 1.0;\n        });\n        document.getElementById(\"btnStart\").addEventListener(\"click\", ()=>pipeUniforms.uSpeed.value = 0.8);\n        document.getElementById(\"btnStop\").addEventListener(\"click\", ()=>pipeUniforms.uSpeed.value = 0.0);\n        document.getElementById(\"btnPulse\").addEventListener(\"click\", ()=>{\n            const g = allAssets[Math.floor(Math.random() * allAssets.length)];\n            g.userData.temp = 85 + Math.random() * 10;\n            g.userData.load = 1.1;\n            tickTelemetry();\n        });\n        // Auto Rotate toggle\n        const btnAutoRotate = document.getElementById(\"btnAutoRotate\");\n        btnAutoRotate.addEventListener(\"click\", ()=>{\n            controls.autoRotate = !controls.autoRotate;\n            btnAutoRotate.textContent = controls.autoRotate ? \"Auto Rotate: ON\" : \"Auto Rotate: OFF\";\n        });\n        // ---------- Animation loop ----------\n        let clock = new three__WEBPACK_IMPORTED_MODULE_2__.Clock();\n        function animate() {\n            requestAnimationFrame(animate);\n            const dt = clock.getDelta();\n            pipeUniforms.uTime.value += dt;\n            flowDots.forEach((d)=>{\n                d.t = (d.t + d.speed * (0.3 + pipeUniforms.uSpeed.value)) % 1;\n                const pos = d.curve.getPointAt(d.t);\n                d.mesh.position.copy(pos);\n            });\n            controls.update();\n            composer.render();\n            labelRenderer.render(scene, camera);\n        }\n        animate();\n        // ---------- Resize ----------\n        function onResize() {\n            const w = container.clientWidth, h = container.clientHeight;\n            camera.aspect = w / h;\n            camera.updateProjectionMatrix();\n            renderer.setSize(w, h);\n            composer.setSize(w, h);\n            labelRenderer.setSize(w, h);\n        }\n        window.addEventListener(\"resize\", onResize);\n        // Initial telemetry seed - more random data\n        for(let i = 0; i < 24; i++)sparkPush(0.5 + Math.random() * 3.0);\n        tickTelemetry();\n        // Subtle camera intro from 03.html\n        (function introCam() {\n            const start = performance.now(), dur = 1600;\n            const sPos = camera.position.clone();\n            const ePos = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(34, 22, 38);\n            function step() {\n                const t = Math.min(1, (performance.now() - start) / dur);\n                const k = 1 - Math.pow(1 - t, 3);\n                camera.position.lerpVectors(sPos, ePos, k);\n                controls.update();\n                if (t < 1) requestAnimationFrame(step);\n            }\n            step();\n        })();\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: mountRef,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        }\n    }, void 0, false, {\n        fileName: \"/Users/bellergy/Library/CloudStorage/GoogleDrive-michael.chau@mpiot.com.hk/My Drive/Projects/Demo UI/digital-twins/HVAC/components/ThreeScene.js\",\n        lineNumber: 527,\n        columnNumber: 10\n    }, this);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/ThreeScene.js\n");

/***/ })

};
;